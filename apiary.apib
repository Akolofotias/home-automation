FORMAT: 1A
HOST: http://r3bfish.ddns.net:8083/ZAutomation/api

# Z-Way API

+ Allowed HTTPs requests:
    + POST      To create resource
    + PUT       To update resource
    + GET       Get a resource or list of resources
    + DELETE    To delete resource

+ Allow get parameters
    + suppress_response_codes (optional, boolean) ... If this parameter is present, all responses will be returned with a 200 OK status code - even errors. This parameter exists to accommodate Flash and JavaScript applications running in browsers that intercept all non-200 responses. If used, itâ€™s then the job of the client to determine error states by parsing the response body. Use with caution, as those error messages may change.
    + pagination (optional, boolean) ... If this parameter is present, all response of the lists (Devices, Notifications) will be included pagination  
    + limit (optional, number) ... If this parameter is present, then set limit models per page, else set default 10 models per page
    + offset (options, number) ... If this parameter is present, then set start point models in page, else set default offset 0.
    + fields (options, string) ... example: nameField1,nameField2,...

+ Status codes,
    + 200:  "200 OK",
    + 201:  "201 Created",
    + 204:  "204 No Content",
    + 304:  "304 Not Modified",
    + 400:  "400 Bad Request",
    + 401:  "401 Unauthorized",
    + 403:  "403 Forbidden",
    + 404:  "404 Not Found",
    + 405:  "405 Method Not Allowed",
    + 500:  "500 Internal server error",
    + 501:  "501 Not Implemented"
    + 503:  "503 Service Unavailable"
    

# Group Platform Availability 
<a id="available" ></a>

It will return 503 with Error message (see the details below). You can also use **/v1/status** resource to check the Platform availability.

## /v1/status
### GET
Resource for checking the Platform availability.

+ Request

    + Headers

            Accept: application/json


+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body 
    
            {
                error: null,
                data: "OK",
                code: 200
            }
            
    + Schema

            {
                "type": "object",
                "required": false,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
    
+ Response 503

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                error: "Internal server error. Please fill in bug report with request_id='" + this.error + "'",
                data: null,
                code: 503,
                message: "Service Unavailable"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

# Group Platform Restart
<a id="available" ></a>

You can use **/v1/restart** to restart the controller. This will reload all notifications, ZAutomation API and reinitialize (not reload) all apps.

## /v1/restart
### GET
Platform Restart

+ Request

    + Headers

            Accept: application/json


+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body 
    
            {
                error: null,
                data: "OK",
                code: 200
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }


# Group Namespaces
<a id="available" ></a>

Namespaces is a collection of internal registered names and ids - e.g. for zway or virtual devices. 
This API is mostly used in apps to create custom filters for virtual device selection. The data is build during z-way controller start up. Virtual device namespaces are influenced by the following listener emits:
* **created** ... added to devices collection
* **removed** ... removed from devices collection
* **change:metrics:title** ... change name of virtual dev
* **change:permanently_hide** ... deactivate virtual device - not hidden and usable

The namespace structure of virtual devices depends on their device types an probe types. Please check chapter **[Devices](anchor-devices)** for more information.

###Methods
- **/v1/namespaces** - read all namespaces.
- **/v1/namespaces/zways** - zway namespaces.
- **/v1/namespaces/devices_all** - array of all registered virtual devices that includes deviceId and deviceName.
- **/v1/namespaces/{devices_DEVICETYPE}** - read namespaces of specific **device type** and show their **probe type** children.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}** - use path to read namespaces of child probe types  from a specific device type.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}.deviceId** - get an array of all deviceId's that lies under path endpoint.
- **/v1/namespaces/{devices_DEVICETYPE}.{PATH}.deviceName** - get an array of all deviceNames's lies under path endpoint.


## Namespaces Collection [/v1/namespaces]
### List all Namespaces [GET]

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: [
                    {
                        id: "zways",
                        params: [
                            {
                                zwayName: "zway"
                            }
                        ]
                    },
                    {
                        id: "devices_battery",
                        params: [
                            {
                                deviceId: "ZWayVDev_zway_7-0-128",
                                deviceName: "Fibar Group Battery (7.0)"
                            }
                        ]
                    },
                    {
                        id: "devices_all",
                        params: [
                            {
                                deviceId: "DummyDevice_12",
                                deviceName: "Switch All On"
                            },
                            {
                                deviceId: "DummyDevice_13",
                                deviceName: "Tischlampe"
                            },
                            {
                                deviceId: "DummyDevice_18",
                                deviceName: "Deckenlampe"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-37",
                                deviceName: "Smoke Sirene Switch"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-48-2",
                                deviceName: "Smoke Sensor"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-48-8",
                                deviceName: "Smoke Tamper Sensor"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
                                deviceName: "Smoke Alarm"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
                                deviceName: "Smoke Burglar Alarm"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
                                deviceName: "Smoke System Alarm"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-128",
                                deviceName: "Fibar Group Battery (7.0)"
                            },
                            {
                                deviceId: "Sonos_Device_Play_192.168.10.205_21",
                                deviceName: "Sonos Play Wohnzimmer"
                            },
                            {
                                deviceId: "Sonos_Device_Volume_192.168.10.205_21",
                                deviceName: "Sonos Volume Wohnzimmer"
                            }
                        ]
                    },
                    {
                        id: "devices_switchBinary",
                        params: [
                            {
                                deviceId: "DummyDevice_12",
                                deviceName: "Switch All On"
                            },
                            {
                                deviceId: "ZWayVDev_zway_7-0-37",
                                deviceName: "Smoke Sirene Switch"
                            },
                            {
                                deviceId: "Sonos_Device_Play_192.168.10.205_21",
                                deviceName: "Sonos Play Wohnzimmer"
                            }
                        ]
                    },
                    {
                        id: "devices_switchMultilevel",
                        params: [
                            {
                                deviceId: "DummyDevice_13",
                                deviceName: "Tischlampe"
                            },
                            {
                                deviceId: "DummyDevice_18",
                                deviceName: "Deckenlampe"
                            },
                            {
                                deviceId: "Sonos_Device_Volume_192.168.10.205_21",
                                deviceName: "Sonos Volume Wohnzimmer"
                            }
                        ]
                    },
                    {
                        id: "devices_sensorBinary",
                        params: {
                            smoke: [
                                {
                                    deviceId: "ZWayVDev_zway_7-0-48-2",
                                    deviceName: "Smoke Sensor"
                                }
                            ],
                            tamper: [
                                {
                                    deviceId: "ZWayVDev_zway_7-0-48-8",
                                    deviceName: "Smoke Tamper Sensor"
                                }
                            ],
                            alarm: {
                                smoke: [
                                    {
                                        deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
                                        deviceName: "Smoke Alarm"
                                    }
                                ],
                                burglar: [
                                    {
                                        deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
                                        deviceName: "Smoke Burglar Alarm"
                                    }
                                ],
                                system: [
                                    {
                                        deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
                                        deviceName: "Smoke System Alarm"
                                    }
                                ]
                            }
                        }
                    }
                ],
                code: 200,
                message: "200 OK"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: "Namespaces array is null"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }

## Z-Way Namespaces Collection [/v1/namespaces/zways]
### List all Z-Way Namespaces [GET]

+ Response 200 (application/json)
    
    + Body 

            {
                data: [
                    {
                        "zwayName": "zway"
                    },
                    {
                        "zwayName": "zway_remote_1"
                    },
                    {
                        "zwayName": "zway_remote_2"
                    }
                ],
                code: 200,
                message: "200 OK",
                error: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "data": {
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    },
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

## Virtual Device Namespace Model  [/v1/namespaces/{devices_DEVICETYPE}.{PATH}.{deviceId,deviceName}]
### List specific namespaces [GET]
            
+ Parameters
    + `devices_DEVICETYPE` (optional, string, `devices_sensorBinary`) ... get namespaces of all devices `devices_all` or by device type - e.g. `devices_switchBinary`, `devices_sensorBinary`, `devices_switchControl` ...
    + PATH (optional, string, `alarm.smoke`) ... get namespaces of devices depending on their probe type - e.g. `smoke`, `alarm`, `alarm.smoke`
    + deviceId (optional, string, `deviceId`) ... get an array with device ID's of all virtual child devices.
    + deviceName (optional, string, `deviceName`) ... get an array with device names's of all virtual child devices.
    

+ Response 200 (application/json)
    
    + Body 

            {
                data: {
                    smoke: [
                        {
                            deviceId: "ZWayVDev_zway_7-0-48-2",
                            deviceName: "Smoke Sensor"
                        }
                    ],
                    tamper: [
                        {
                            deviceId: "ZWayVDev_zway_7-0-48-8",
                            deviceName: "Smoke Tamper Sensor"
                        }
                    ],
                    alarm: {
                        smoke: [
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-1-2-A",
                                deviceName: "Smoke Alarm"
                            }
                        ],
                        burglar: [
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-7-3-A",
                                deviceName: "Smoke Burglar Alarm"
                            }
                        ],
                        system: [
                            {
                                deviceId: "ZWayVDev_zway_7-0-113-9-1-A",
                                deviceName: "Smoke System Alarm"
                            }
                        ]
                    }
                },
                code: 200,
                message: "200 OK",
                error: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                        "smoke": {
                            "type": "array",
                            "required": true
                        },
                        "tamper"
                            "type": "array",
                            "required": true
                        },
                        "alarm": {
                            "type": "object",
                            "properties": {
                            "smoke": {
                                "type": "array",
                                "required": true
                            },
                            "burglar"
                                "type": "array",
                                "required": true
                            },
                            "system": {
                                "type": "integer",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: "No namespaces found with this path: foobar"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
# Group Modules and Instances
<a id="available" ></a>

This API prepares the whole meta data of all registered modules and their instances. 

###Methods for:
#### Module Meta Data
- **/v1/modules** - read all module meta data.
- **/v1/modules/{module-id}** - get meta data of specific module

#### Module Handling
- **/v1/modules/install** - download and install module (.tar.gz/ .zip) from the given address.
- **/v1/modules/update** - download and overwrite module (.tar.gz/ .zip) from the given address. Reload JS and meta data of updated module.
- **/v1/modules/reset/{module-id}** - resets an updated module back to its preinstalled version. Module needs to be preinstalled by on current firmware.
- **/v1/modules/delete/{module-id}** - deletes a **non preinstalled** module and removes all its instances. Cannot be undone without doing backup before.
- **/v1/modules/reinitialize/{module-id}** - stops all instances of module, reloads JS and meta data and starts instances again - useful for module development.

#### Instances
- **/v1/instances** - get all instances.
- **/v1/instances/{module-name}** - get an array of all instances of one module.
- **/v1/instances/{module-id}** - create/read/update/delete instances.

#### Module Categories
- **/v1/modules/categories** - show all module categories
- **/v1/modules/categories/{category-id}** - list modules by category

#### Access to Online Store Groups 
- **/v1/modules/tokens** - create/read/update/delete tokens for online store group access.

## Module attributes

This is a list of all module attributes hand out by the api. Some of them are predefined by module.json and the rest is added by the controller after initialisation.

* ``id``            _immutable (string, uniq)_  - class name as unique identifier
* ``location``      _immutable (string)_        - path to file directory: /modules or /userModules
* ``className``     _immutable (string)_        - reference to class name from index.js
* ``hasReset``      _(boolean, false)_          - indicator if module could be reseted
* ``created``       _(boolean, false)_          - indicator if an instance of a singleton module already exists
* ``dependencies``  _(array, [])_               - id's of modules that are necessary to initiate this module
* ``singleton``     _(boolean, false)_          - indicates if a module could have only one (singleton) or more running instances 
* ``category``      _(string)_                  - assign module to special category
* ``author``        _(string)_                  - name of author
* ``homepage``      _(string, uri)_             - homepage (of author)
* ``icon``          _(string, uri)_             - custom icon field: looks in folder _/LOCATION/MODULENAME/htdocs/ICON-NAME.png_
* ``version``       _(string or number)_        - current version of module, format MAJOR.FEATURES.PATCHES ``0.0.0``
* ``maturity``      _(string)_                  - shows maturity of a modules: _alpha, beta, gamma, ... or stable_
* ``repository``    _(object)_                  - information about the repository where to find the module e.g. ``{"type": "git","source": "https://github.com/Z-Wave-Me/home-automation"}``
* ``defaults``      _(object)_                  - defines default attributes (basic skeleton) of the module, also includes module title and description e.g. ``{"title": "AutoLock","description": "Electronic Doors typically move the dead bold of the door. [...]"``
}
* ``schema``        _(object)_                  - defines formatting schema for UI transformation with Alpaca Forms
* ``options``       _(object)_                  - defines view attributes of objects for UI transformation with Alpaca Forms

More information about 'How to build a module?' you will find [here in this tutorial on developer.z-wave.me](http://developer.z-wave.me/?uri=help). Please check out [http://www.alpacajs.org/](http://www.alpacajs.org/) to learn more about Alpaca Forms and how you could use it to make your own modules for home automation.

## Modules Collection [/v1/modules]
### List all Modules [GET]

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: [
                    {
                        id: 'module-id',
                        
                    }
                ],
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["array"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
## Module Model [/v1/modules/{module-id}]
### List Module Meta Data [GET]

+ Parameters
    + module-id (required, string, `BatteryPolling`) ... class name of module from which meta data should be requested

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    "singleton": true,
                    "dependencies": [
                        "Cron"
                    ],
                    "category": "basic_gateway_modules",
                    "author": "Z-Wave.Me",
                    "homepage": "http://razberry.z-wave.me",
                    "icon": "icon.png",
                    "moduleName": "BatteryPolling",
                    "version": "2.0.1",
                    "maturity": "stable",
                    "repository": {
                        "type": "git",
                        "source": "https://github.com/Z-Wave-Me/home-automation"
                    },
                    "defaults": {
                        "title": "Battery Polling",
                        "description": "The battery polling will update the battery status by asking all battery-operated device once a week for a battery status update.. You can pick the day of the week and a warning level, when this module will send you a warning note.",
                        "launchWeekDay": 0,
                        "warningLevel": 20
                    },
                    "schema": {
                        "type": "object",
                        "properties": {
                            "launchWeekDay": {
                                "type": "number",
                                "required": true,
                                "enum": [
                                    -1,
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    0
                                ]
                            },
                            "warningLevel": {
                                "type": "select",
                                "required": true,
                                "enum": [
                                    5,
                                    10,
                                    15,
                                    20
                                ]
                            }
                        },
                        "required": false
                    },
                    "options": {
                        "fields": {
                            "launchWeekDay": {
                                "label": "Do battery polling on",
                                "optionLabels": [
                                    "Every Day",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday",
                                    "Sunday"
                                ]
                            },
                            "warningLevel": {
                                "label": "Warning Level",
                                "helper": "Warn if device's battery is below this level",
                                "optionLabels": [
                                    "5%",
                                    "10%",
                                    "15%",
                                    "20%"
                                ]
                            }
                        }
                    },
                    "id": "BatteryPolling",
                    "location": "modules/BatteryPolling",
                    "hasReset": false
                    },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["array"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: "Instance 'module-id' not found"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
## Install Module [/v1/modules/install{?moduleUrl}]
### INSTALL [POST]

+ Parameters
    + moduleUrl (required, string, `http://developer.z-wave.me/modules/ScheduledScene.tar.gz`) ... target download url

+ Request (application/json)
    
    + Body 

            {
                error: null,
                data: {
                        moduleUrl: "http://developer.z-wave.me/modules/ScheduledScene.tar.gz"
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "moduleUrl": {
                                "type": "string",
                                "required": true
                            },
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }


+ Response 201 (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    key: "The app was successfully installed.",
                    appendix: null
                },
                code: 201,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"; {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "appendix"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 409

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 409,
                message: "409 conflict",
                error: {
                    key: "The app is already installed.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: {
                    key: "Failed to install the app.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }

## Update Module [/v1/modules/update{?moduleUrl}]
### UPDATE [POST]

+ Parameters
    + moduleUrl (required, string, `http://developer.z-wave.me/modules/ScheduledScene.tar.gz`) ... target download url
    
+ Request (application/json)
    
    + Body 

            {
                error: null,
                data: {
                        moduleUrl: "http://developer.z-wave.me/modules/ScheduledScene.tar.gz"
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "moduleUrl": {
                                "type": "string",
                                "required": true
                            },
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    key: "The app was successfully updated.",
                    appendix: null
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": ["array"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: "Cannot find the app."
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string"],
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: {
                    key: "Failed to update the app.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
## Reset Module [/v1/modules/reset/{module-id}]
### RESET - works only if module was preinstalled by default [POST]

+ Parameters
    + module-id (required, string, `ScheduledScene`) ... class name of module that should be reseted

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    key: "The app was successfully reseted.",
                    appendix: "current_version"
                        
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "appendix"
                                "type": "string",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: {
                    key: "App not found.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
+ Response 412

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 412,
                message: "412 Precondition Failed",
                error: {
                    key: "App is already reset.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: {
                    key: "There was an error during resetting the app 'module-id'. Maybe a server restart could solve this problem.",
                    errorMsg: null
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
## Delete Module [/v1/delete/{module-id}]
### DELETE - works only with non preinstalled modules [DELETE]

+ Parameters
    + module-id (required, string, `MultiButton`) ... class name of module that should deleted

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    key: "The app was successfully deleted",
                    appendix: null
                        
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "appendix"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error: {
                    key: "App not found."
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: {
                    key: "Failed to delete the app."
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "key": {
                                "type": "string",
                                "required": true
                            },
                            "errorMsg"
                                "type": ["string", "null"],
                                "required": true
                            }
                        }
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
## Reinitialize Module [/v1/reinitialize/{module-id}]   
### REINITIALIZE [GET]

+ Parameters
    + module-id (required, string, `BatteryPolling`) ... class name of module that should be reinitialized

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: "Reinitialization of app 'module-id' successfull.",
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "string",
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not Found",
                error:  "App not found."
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string"],
                        "required": true
                    }
                }
            }
            
## Instances Collection [/v1/instances]   
### List all Instances [GET]

+ Response 200 (application/json)
    
    + Body 

            {
                data: [
                    {
                        id: 2,
                        moduleId: "Cron",
                        params: {},
                        active: true,
                        title: "System Clock (CRON)",
                        description: "Scheduler used by other modules.",
                        creationTime: 1459769281,
                        state: null,
                        module: "System Clock (CRON)"
                    }, {
                        id: 3,
                        moduleId: "InbandNotifications",
                        params: {},
                        active: true,
                        title: "Inband Notifier",
                        description: "Creates and records the presentation of events in the event list (Eventlog).",
                        creationTime: 1459769281,
                        state: null,
                        module: "Inband Notifier"
                    }, {
                        id: 7,
                        moduleId: "BatteryPolling",
                        active: "true",
                        title: "Battery Polling",
                        description: "Set up an interval that regularly polls the battery status of a battery devices.",
                        params: {
                            launchWeekDay: 0,
                            warningLevel: "20"
                        },
                        creationTime: 1459769281
                    }
                ],
                code: 200,
                message: "200 OK",
                error: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: "Could not list Instances."
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }

### CREATE [POST]

+ Request (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    moduleId: "BatteryPolling",
                    params: {
                        launchWeekDay: 0,
                        warningLevel: "20"
                    }
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "moduleId": {
                                "type": "string",
                                "required": true
                            },
                            "params": {
                                "type": "object",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

+ Response 201 (application/json)
    
    + Body 

            {
                error: null,
                data: [
                    {
                        moduleId: 'moduleId',
                        
                    }
                ],
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "id": {
                                "type": "integer",
                                "required": true
                            },
                            "moduleId": {
                                "type": "string",
                                "required": true
                            },
                            "params": {
                                "type": "object",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not found",
                error: "Module 'module-id' doesn't exist."
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }

+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: "Cannot instantiate module 'module-id'"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }

## Instance Model [/v1/instances/{instance-id}]

+ Parameters
    + instance-id (required, string, `7`) ... id (number) of target instance

### READ [GET]

+ Response 200 (application/json)
    
    + Body 

            {
                data: [
                    {
                        id: 7,
                        moduleId: "BatteryPolling",
                        active: "true",
                        title: "Battery Polling",
                        description: "Set up an interval that regularly polls the battery status of a battery devices.",
                        params: {
                            launchWeekDay: 0,
                            warningLevel: "20"
                        },
                        creationTime: 1459769281
                    }
                ],
                code: 200,
                message: "200 OK",
                error: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not found",
                error: "Instance 'instance-id' is not found"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }
            
            
### UPDATE [PUT]

+ Request (application/json)
    
    + Body 

            {
                error: null,
                data: {
                    moduleId: "BatteryPolling",
                    title: "New name for BatteryPolling",
                    params: {
                        launchWeekDay: 5,
                        warningLevel: "15"
                    }
                },
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data": {
                        "type": "object",
                        "required": true,
                        "properties": {
                            "moduleId": {
                                "type": "string",
                                "required": true
                            },
                            "params": {
                                "type": "object",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    }
                }
            }

+ Response 200 (application/json)
    
    + Body 

            {
                error: null,
                data: [
                    {
                        id: 7,
                        moduleId: "BatteryPolling",
                        active: "true",
                        title: "New name for BatteryPolling",
                        description: "Set up an interval that regularly polls the battery status of a battery devices.",
                        params: {
                            launchWeekDay: 5,
                            warningLevel: "15"
                        },
                        creationTime: 1459769281
                    }
                ],
                code: 200,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data" :{
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not found",
                error: "Instance 'instance-id' is not found"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }
            
+ Response 500

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 500,
                message: "500 Internal server error",
                error: "Cannot reconfigure module 'instance-id' config."
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }
            
### DELETE [DELETE]

+ Response 204 (application/json)
    
    + Body 

            {
                error: null,
                data: null,
                code: 204,
                message: null
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data" :{
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
+ Response 404

    + Headers
    
            Content-Type: application/json
        
    + Body 
    
            {
                data: null,
                code: 404,
                message: "404 Not found",
                error: "Instance 'instance-id' is not found"
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": "string",
                        "required": true
                    },
                    "data": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "code": {
                        "type": "integer",
                        "required": true
                    },
                    "message": {
                        "type": "string",
                        "required": true
                    }
                }
            }

# Group Devices
Devices related resources of the **Devices API**

## Devices Collection [/v1/devices{?since}]
### List all Devices  [GET]

+ Parameters
    + since (optional, integer, `1387881635`) ... `updateTime` of the Devices.

+ Response 200 (application/json)

    + Body 

            {
                "error":null,
                "data":{
                "structureChanged":true,
                "updateTime":1387881635,
                "devices":[
                    {"id":"ZWayVDev_3:0:38","deviceType":"switchMultilevel","metrics":{"level":37,"title":"Dimmer","iconBase":"multilevel"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_4:0:37","deviceType":"switchBinary","metrics":{"level":255,"title":"Switch","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_4:0:50:0","deviceType":"probe","metrics":{"probeTitle":"Electric ","scaleTitle":"kWh","level":0,"title":"Electric  Probe","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_4:0:50:2","deviceType":"probe","metrics":{"probeTitle":"Electric ","scaleTitle":"W","level":0,"title":"Electric  Probe","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881629},
                    {"id":"ZWayVDev_5:0:Thermostat","deviceType":"thermostat","metrics":{"hasSensor":false,"hasMode":{"name":"interviewDone","type":"bool","value":true,"updateTime":1384795592,"invalidateTime":1384795544},"hasSetPoint":{"name":"interviewDone","type":"bool","value":false,"updateTime":1386347818,"invalidateTime":1384795544},"modes":[{"id":0,"title":"Off","target":null},{"id":1,"title":"Heat","target":30},{"id":2,"title":"Cool","target":12},{"id":3,"title":"Auto","target":null},{"id":5,"title":"Resume","target":null},{"id":6,"title":"Fan Only","target":null},{"id":8,"title":"Dry Air","target":null}],"currentMode":1,"title":"Thermostat","iconBase":"thermostat"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_5:0:68","deviceType":"fan","metrics":{"modes":{"0":{"id":0,"title":"Auto Low"},"1":{"id":1,"title":"On Low"},"2":{"id":2,"title":"Auto High"},"3":{"id":3,"title":"On High"}},"currentMode":1,"state":true,"title":"Fan","iconBase":"fan"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_5:0:128","deviceType":"battery","metrics":{"probeTitle":"Battery","scaleTitle":"%","level":89,"title":"Battery (5)","iconBase":"battery"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_6:1:49:2","deviceType":"probe","metrics":{"probeTitle":"Generic","scaleTitle":"","level":20,"title":"Generic Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_6:2:49:3","deviceType":"probe","metrics":{"probeTitle":"Luminiscence","scaleTitle":"%","level":32,"title":"Luminiscence Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_6:3:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":20.399999618530273,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_11:0:Thermostat","deviceType":"thermostat","metrics":{"hasSensor":{"name":"interviewDone","type":"bool","value":true,"updateTime":1385550842,"invalidateTime":1385550823},"hasMode":{"name":"interviewDone","type":"bool","value":true,"updateTime":1385550843,"invalidateTime":1385550823},"hasSetPoint":{"name":"interviewDone","type":"bool","value":true,"updateTime":1385550843,"invalidateTime":1385550823},"modes":[{"id":1,"title":"Heat","target":-1408.0999755859375},{"id":2,"title":"Cool","target":2585.5}],"currentMode":1,"scaleTitle":"Â°C","level":23.200000762939453,"title":"Thermostat","iconBase":"thermostat"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_11:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":23.200000762939453,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_11:0:128","deviceType":"battery","metrics":{"probeTitle":"Battery","scaleTitle":"%","level":59,"title":"Battery (11)","iconBase":"battery"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_12:1:37","deviceType":"switchBinary","metrics":{"level":0,"title":"Switch","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_12:2:37","deviceType":"switchBinary","metrics":{"level":0,"title":"Switch","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_16:0:128","deviceType":"battery","metrics":{"probeTitle":"Battery","scaleTitle":"%","level":0,"title":"Battery (16)","iconBase":"battery"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_18:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":13.100000381469727,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_19:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":6.400000095367432,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509},
                    {"id":"ZWayVDev_20:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":7.599999904632568,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387881509}
                    ]
                }
            }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "updateTime": {
                                "type": "integer",
                                "required": true
                            },
                            "structureChanged": {
                                "type": "boolean",
                                "required": true
                            },
                            "devices": {
                                "type": "array",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
        
## Device [/v1/devices/{id}]
A single Device object with all its details

## Device attributes

* ``id`` _immutable_ (string, uniq) - unique identifier
* ``deviceType`` _immutable_ (string) - device type
* ``updateTime`` _immutable_ (integer) - lastupdate timestamp
* ``metrics`` (object) - device parameters
* ``metrics.probeTitle``    - title of probe, example: _Battery_
* ``metrics.scaleTitle``    - title of scale, example: _%_
* ``metrics.level``         - level, example: _integer, on/off, string_
* ``metrics.icon``          - custom icon field _uri, string_
* ``metrics.title``         - current title _string_
* ``metrics.mode``          - current mode _string or integer_ (only for fan, thermostat, doorlock devices)
* ``metrics.modes``         - avalaible modes _array or objects_ (only for fan, thermostat, doorlock devices)


## Device Types

| deviceType                        | Metrics                   | Commands| Examples                                                                                                                            |
|-----------------------------------|---------------------------|-----------------------------------------------------------------------------------------------|-----------------------------------------------|
| battery                           | probeTitle,scaleTitle, level, icon, title | -                                                                             |-                                              |
| doorlock                          | level, icon, title, mode, modes |**_open_** or **_close_**                                                                |apiURL/devices/:deviceId/command/open          |
| thermostat                        | level, icon, title, mode, modes |**_setMode_** with get-params **_mode_** and/or **_setTemp_** with get-params **_temp_** |apiURL/devices/:deviceId/command/setMode?mode=1|
| switchBinary                      | level, icon, title | **_on_**, **_off_** or **_update_**                                                                  |apiURL/devices/:deviceId/command/on            |
| switchMultilevel                  | level, icon, title | **_on_**, **_off_**, **_min_**, **_max_**, **_update_**, **_exact_** + get params **_level_**        |apiURL/devices/:deviceId/command/exact?level=40|
| switchMultilevel (Blinds)         | level, icon, title | **_up_** Set(255), **_down_** Set(0), **_upMax_** Set(99), **_startUp_** StartLevelChange(0), **_startDown_** StartLevelChange(1), **_stop_** StopLevelChange(), **_update_**, **_exact_** + get params **_level_**                              |apiURL/devices/:deviceId/command/stop|
| sensorBinary                      | probeTitle, level, icon, title | **_update_**                                                                             |apiURL/devices/:deviceId/command/update        |
| sensorMultilevel                  | probeTitle, scaleTitle, level, icon, title | **_update_**                                                                 |apiURL/devices/:deviceId/command/update        |
| switchToggle                      | level, icon, title | **_on_**                                                                                             |apiURL/devices/:deviceId/command/on            |

## Icon Types

**icon** attribute of **metrics** object may be:

* ``''``                                            - none
* ``url(uri)``                                      - URL, example: http://image.com/image.png .
* ``switch``                                        - for **switchBinary** deviceType.
* ``multilevel``                                    - for **switchMultilevel** deviceType.
* ``[smoke, co, cooling, door, motion, flood]``     - for **sensorBinary** deviceType.
* ``[temperature, luminosity, energy, humidity]``   - for **sensorMultilevel** deviceType.
* ``battery``                                       - for **battery** deviceType.
* ``thermostat``                                    - for **thermostat** deviceType.
* ``fan``                                           - for **fan** deviceType.
* ``meter``                                         - for **meter** deviceType.
* ``door``                                          - for **doorlock** deviceType.

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Device to perform action with.

### READ [GET]

Retrieve a Device

+ Response 200 (application/json)

    + Body

            {"error":null,"data":{"meta":{"id":"ZWayVDev_20:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":7.599999904632568,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387882443}}}

    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "id": {
                                "type": "integer",
                                "required": false
                            },
                            "deviceType": {
                                "type": "string",
                                "required": false
                            },
                            "metrics": {
                                "type": "object",
                                "required": true
                            },
                            "updateTime": {
                                "type": "interger"
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }

### UPDATE [PUT]

Update a Device

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Device to perform action with.

+ Request (application/json)

    + Body

            {"id":"ZWayVDev_20:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":7.599999904632568,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387882443}

+ Response 200 (application/json)

    + Body

            {"id":"ZWayVDev_20:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":7.599999904632568,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387882443}


## Device [/v1/devices/{id}/command/{command}{?params}]
### Command to Device [GET]
+ Response 200 (application/json)

    + Body

            {"error":null,"data":{"meta":{"id":"ZWayVDev_20:0:49:1","deviceType":"probe","metrics":{"probeTitle":"Temperature","scaleTitle":"Â°C","level":7.599999904632568,"title":"Temperature Sensor","iconBase":"zwave"},"tags":[],"location":null,"updateTime":1387882443}}}


# Group Locations
Locations related resources of the **Locations API**

## Locations Collection [/v1/locations]
### List all Locations [GET]

+ Response 200 (application/json)

    + Body

            {
                "data":[
                    {"id":6,"title":"Garage"},
                    {"id":7,"title":"Hall"},
                    {"id":8,"title":"Kids"},
                    {"id":9,"title":"Kitchen"},
                    {"id":10,"title":"Bedroom"},
                    {"id":11,"title":"name123"},
                    {"id":12,"title":"test"}
                ],
                "error": null,
                "code": "200 OK",
                "message" null,
            }
        
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "array",
                        "required": true
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
        
### CREATE [POST]

Create a Locatio

+ Request (application/json)
    
    + Body
    
            { "title": "Garage", "icon": "http://example.com/garage.png" }

    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "icon": {
                                "type": "string",
                                "required": false
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }

+ Parameters
    + title (required, string, `Garage`) ... `title` of the location.
    + icon (optional, string, `http://example.com/garage.png`) ... `icon` of the location.

+ Response 201 (application/json)

    + Body 
        
            { "id": 1, "title": "Garage", "icon": "http://example.com/garage.png" }
        
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "id": {
                                "type": "integer",
                                "required": true
                            },
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "icon": {
                                "type": "string",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }

## Location [/v1/locations/{id}]
A single Location object with all its details

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Location to perform action with.

### READ [GET]

Retrieve a Location

+ Response 200 (application/json)

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "icon": {
                                "type": "string",
                                "required": false
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
### UPDATE [PUT]

Update a Location

+ Response 200 (application/json)

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }
            
    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "icon": {
                                "type": "string",
                                "required": false
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }

### DELETE [DELETE]

Remove a Location

+ Response 204

# Group Profiles
Profiles related resources of the **Profiles API**

## Profiles Collection [/v1/profiles]
### List all Profiles [GET]

+ Response 200 (application/json)

        [{
            "data":[
                "{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
            ],
            "error": null,
            "message": null,
            "code": "200 OK"
        }]
        
### CREATE [POST]

Create a Profile

+ Request (application/json)
   
        + Body
        
                { "name": "Default", "description": "descriptions", "active": false, "positions": []}
        
        + Schema 
        
                {
                    "type": "object",
                    "required": true,
                    "properties": {
                        "error": {
                            "type": ["string", "null"],
                            "required": true
                        },
                        "data"
                            "type": "object",
                            "required": true,
                            "properties": {
                                "description": {
                                    "type": "string",
                                    "required": false,
                                },
                                "title": {
                                    "type": "string",
                                    "required": true
                                },
                                "positions": {
                                    "type": "array",
                                    "required": true
                                },
                                "active": {
                                    "type": "boolean",
                                    "required": true
                                }
                            }
                        },
                        "code": {
                            "type": ["integer", "null"],
                            "required": true
                        },
                        "message": {
                            "type": ["string", "null"],
                            "required": true
                        },
                    }
                }
        
+ Response 201 (application/json)

    + Body

            {
                "data":[
                    "{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
                ],
                "error": null,
                "message": null,
                "code": "200 OK"
            }

## Profile [/v1/profiles/{id}]
A single Profile object with all its details

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Profile to perform action with.
    + name (required, string, `Default`) ... `name` of the profile.
    + description (optional, string, `description`) ... `description` of the profile.
    + active (optional, boolean, `false`) ... `profile is activated`.
    + positions (required, array, `[deviceId1, deviceId2]`) ... `show and sortable on dashboard`.

### READ [GET]

Retrieve a Profile

+ Response 200 (application/json)

    + Body

            {
                "data":[
                    {"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","positions":[],"active":true},
                ],
                "error": null,
                "message": null,
                "code": "200 OK"
            }
            
    + Schema
     
            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "id": {
                                "type": "integer",
                                "required": true
                            },
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "positions": {
                                "type": "array",
                                "required": true
                            },
                            "active": {
                                "type": "boolean",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }
            
### Update a Profile [PUT]

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Profile to perform action with.
    + name (required, string, `Default`) ... `name` of the profile.
    + description (optional, string, `description`) ... `description` of the profile.
    + active (optional, boolean, `false`) ... `profile is activated`.
    + positions (required, array, `[deviceId1, deviceId2]`) ... `show and sortable on dashboard`.


+ Response 200 (application/json)

    + Body

            {
                "data":[
                    "{"id":1,"name":"Default","description":"This is default profile. Default profile created automatically.","widgets":[],"active":true}",
                ],
                "error": null,
                "message": null,
                "code": "200 OK"
            }

    + Schema
     
            {
                "type": "object",
                "required": true,
                "properties": {
                    "error": {
                        "type": ["string", "null"],
                        "required": true
                    },
                    "data"
                        "type": "object",
                        "required": true,
                        "properties": {
                            "title": {
                                "type": "string",
                                "required": true
                            },
                            "description": {
                                "type": "string",
                                "required": false
                            },
                            "positions": {
                                "type": "array",
                                "required": true
                            },
                            "active": {
                                "type": "boolean",
                                "required": true
                            }
                        }
                    },
                    "code": {
                        "type": ["integer", "null"],
                        "required": true
                    },
                    "message": {
                        "type": ["string", "null"],
                        "required": true
                    },
                }
            }

### Remove a Profile [DELETE]
+ Response 204

# Group Notifications
Locations related resources of the **Notifications API**

## Notifications Collection [/v1/notifications{?since}]

### List all Notification  [GET]

+ Parameters
    + redeemed = `false` (optional, boolean, `?redeemed=true`) ... if `redeemed` eq true - include redeemed notifications
    + since (optional, integer, `?since=1387881635`) ... `updateTime` of the Notifications.

+ Response 200 (application/json)

    + Body
    
            {"error":null,
              "data":{
                "updateTime":1387884437,
                "notifications":[
                  {"id":"1387199352223","timestamp":"2013-12-16T13:09:12.223Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true},
                  {"id":"1387200419730","timestamp":"2013-12-16T13:26:59.730Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}
                ]
              }
            }        
        
## Notification [/v1/notifications/{id}]
A single Notice object with all its details

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the notifications to perform action with.

### Retrieve a Notification [GET]
+ Response 200 (application/json)

    + Body

            {"error":null,"data":{"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}}

### Update a Notification [PUT]

+ Parameters
    + id (required, integer, `1`) ... Numeric `id` of the Notification to perform action with.

+ Request (application/json)

    + Body

            {"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}

+ Response 200 (application/json)

    + Body

            {"error":null,"data":{"id":1387202340396,"timestamp":"2013-12-16T13:59:00.396Z","level":"error","message":"Cannot remove location 54545 - doesn't exist","redeemed":true}}

# Group Device Histories
Device related resources of the **History API**

## Histories Collection [/v1/history]

### List all Device Histories  [GET]

+ Response 200 (application/json)

    + Body
    
            {"error":null,
              "data":{
                "updateTime":1387884437,
                "history":[
                            {
                            "id": "ZWayVDev_zway_3-0-48-1",
                            "dT": "sensorBinary",
                            "mH": [
                                    {
                                        "id": 1424185598,
                                        "t": "2015-02-17T15:06:38.404Z",
                                        "l": "on"
                                    },
                                    {
                                        "id": 1424185662,
                                        "t": "2015-02-17T15:07:42.382Z",
                                        "l": "off"
                                    }
                                ]
                            },{
                            "id": "ZWayVDev_zway_3-0-49-3",
                            "dT": "sensorMultilevel",
                            "mH": [
                                    {
                                        "id": 1424172352,
                                        "t": "2015-02-17T11:25:52.723Z",
                                        "l": "21"
                                    },
                                    {
                                        "id": 1424172382,
                                        "t": "2015-02-17T11:26:22.743Z",
                                        "l": "22"
                                    }
                                ]
                            }
                ]
              }
            }        
        
## Device History [/v1/history/{id}{?since}]
A single device history object with all its details

+ Parameters
    + id (optional, string, `/ZWayVDev_zway_3-0-48-1`) ... Device `id` of the device to perform action with.
    + since (optional, integer, `?since=1424186368`) ... `updateTime` of the metrics change.

### Retrieve a single Device History [GET]
+ Response 200 (application/json)

    + Body

            {
            "data": {
                "id": "ZWayVDev_zway_3-0-48-1",
                "since": 1424186368,
                "deviceHistory": [
                            {
                                "id": 1424186368,
                                "t": "2015-02-17T15:19:28.698Z",
                                "l": "off"
                            },
                            {
                                "id": 1424186396,
                                "t": "2015-02-17T15:19:56.806Z",
                                "l": "on"
                            },
                            {
                                "id": 1424186427,
                                "t": "2015-02-17T15:20:27.238Z",
                                "l": "off"
                            },
                            {
                                "id": 1424187453,
                                "t": "2015-02-17T15:37:33.410Z",
                                "l": "on"
                            }
                    ]
                },
            "code": 200,
            "message": "200 OK",
            "error": null
            }
